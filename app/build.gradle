apply plugin: 'com.android.application'
apply plugin: 'android-apt'

def buildTime() {
    return new Date().format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))
}

def buildCode() {
    return Integer.parseInt(versionMajor) * 10000 + Integer.parseInt(versionMinor) * 1000 + Integer.parseInt(versionPatch) * 100 + Integer.parseInt(versionBuild);
}
android {
    compileSdkVersion Integer.parseInt(project.compileSdkVersionNum)
    buildToolsVersion project.buildToolsVersionNum

    defaultConfig {
        applicationId defaultAppId
        minSdkVersion project.minSdkVersionNum
        targetSdkVersion project.targetSdkVersionNum
        versionCode buildCode()
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        // 修改BuildConfig文件里的BUILD_TIME字段
        buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\""
        resValue "string", "app_name", "calendar"
    }

    signingConfigs {
        release {
            // read from signing.properties
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            versionNameSuffix "-debug"
            applicationIdSuffix ".debug"
            resValue "string", "app_name", "debug-calendar"
        }

        test.initWith(buildTypes.debug)
        test {
            versionNameSuffix "-test"
            applicationIdSuffix ".test"
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        preview.initWith(buildTypes.preview)
        preview {
            applicationIdSuffix ".preview"
        }
    }

    lintOptions {
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

}

configurations.all {
    resolutionStrategy {
        cacheChangingModulesFor 0, 'seconds'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:21.0.3'
    compile 'com.android.support:cardview-v7:21.0.0'
    compile 'com.android.support:palette-v7:21.0.0'
    compile 'com.android.support:recyclerview-v7:21.0.0'

    compile 'com.fmsirvent:parallaxeverywhere:1.0.1'
    compile 'com.squareup.picasso:picasso:2.4.0'
    compile 'com.squareup:otto:1.3.5'
    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'joda-time:joda-time:2.6'
    compile 'com.google.guava:guava:18.0'

    compile ("com.github.chenupt.android:multiplemodel:1.1.0-SNAPSHOT@aar"){ changing=true }
    compile 'com.github.johnpersano:supertoasts:1.3.4@aar'
    compile 'com.github.castorflex.smoothprogressbar:library:1.0.0'
    compile 'com.github.castorflex.smoothprogressbar:library-circular:1.0.2'
    compile 'com.fmsirvent:parallaxeverywhere:1.0.1'

    apt "org.androidannotations:androidannotations:3.2"
    compile "org.androidannotations:androidannotations-api:3.2"
}

apt {
    arguments {
        androidManifestFile variant.outputs[0].processResources.manifestFile
        resourcePackageName defaultAppId
    }
}


File propFile = file('signing.properties');
if (propFile.exists()) {
    println 'load signing.properties'
    def Properties props = new Properties()
    props.load(new FileInputStream(propFile))

    if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'no key_store'
    android.buildTypes.release.signingConfig = null
}


task printProps << {
    println project.versionPatch
    println code
}